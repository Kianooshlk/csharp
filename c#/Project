//کلاس مهر و موم شده
//در برنامه‌نویسی شی‌گرا، کلاس مهر و موم شده کلاسی است که امکان ارث‌بری از آن وجود ندارد
public sealed class Animal
{
    public void MakeSound()
    {
        Console.WriteLine("Animal makes a sound");
    }
}

// خطای کامپایل: نمی توان از کلاس مهر و موم شده ارث بری کرد
// public class Dog : Animal { }

//----------------1-----------------

//کلاس های جزئی 
//به ما این امکان را می‌دهند یک کلاس را چندین فایل تقسیم کنیم

// فایل اول: Part1.cs
public partial class MyClass
{
    public void Method1()
    {
        // ...
    }
}

// فایل دوم: Part2.cs
public partial class MyClass
{
    public void Method2()
    {
        // ...
    }
}

//----------------2-----------------

//چند ریختی
//چند ریختی زمان کامپایل

public class Animal
{
    public virtual void MakeSound()
    {
        Console.WriteLine("Animal makes a sound");
    }
}

public class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Woof!");
    }
}

//چند ریختی زمان اجرا

public class Animal
{
    public virtual void MakeSound()
    {
        Console.WriteLine("Animal makes a sound");
    }
}

public class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Woof!");
    }
}

public class Cat : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Meow!");
    }
}

//----------------4-----------------

//اریه ها

int[] numbers = new int[5]; // آرایه‌ای از 5 عدد صحیح

//دسترسی به عناصر آرایه
numbers[0] = 10; // مقدار 10 را به اولین عنصر آرایه اختصاص می‌دهیم
Console.WriteLine(numbers[2]); // مقدار عنصر سوم را چاپ می‌کند (که هنوز مقداردهی نشده است)

//مقداردهی اولیه آرایه
int[] numbers = { 1, 2, 3, 4, 5 };

//آرایه‌های چند بعدی
int[,] matrix = new int[2, 3]; // آرایه‌ای دو بعدی با 2 سطر و 3 ستون
